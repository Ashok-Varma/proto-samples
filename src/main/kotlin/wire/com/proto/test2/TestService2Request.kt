// Code generated by Wire protocol buffer compiler, do not edit.
// Source: test2.TestService2Request in test2.proto
package com.proto.test2

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.countNonNull
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.missingRequiredFields
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Double
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import kotlin.lazy
import okio.ByteString

public class TestService2Request(
  /**
   *  https://developers.google.com/protocol-buffers/docs/proto#specifying-rules
   *  https://developers.google.com/protocol-buffers/docs/proto#scalar
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public val optionalDouble: Double? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.REQUIRED
  )
  public val requiredDouble: Double,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public val optionalInt32: Int? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.REQUIRED
  )
  public val requiredInt32: Int,
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public val optionalInt64: Long? = null,
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#INT64",
    label = WireField.Label.REQUIRED
  )
  public val requiredInt64: Long,
  @field:WireField(
    tag = 8,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public val optionalUint32: Int? = null,
  @field:WireField(
    tag = 12,
    adapter = "com.squareup.wire.ProtoAdapter#UINT32",
    label = WireField.Label.REQUIRED
  )
  public val requiredUint32: Int,
  @field:WireField(
    tag = 13,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public val optionalUint64: Long? = null,
  @field:WireField(
    tag = 14,
    adapter = "com.squareup.wire.ProtoAdapter#UINT64",
    label = WireField.Label.REQUIRED
  )
  public val requiredUint64: Long,
  @field:WireField(
    tag = 16,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32"
  )
  public val optionalSint32: Int? = null,
  @field:WireField(
    tag = 17,
    adapter = "com.squareup.wire.ProtoAdapter#SINT32",
    label = WireField.Label.REQUIRED
  )
  public val requiredSint32: Int,
  @field:WireField(
    tag = 18,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  public val optionalSint64: Long? = null,
  @field:WireField(
    tag = 19,
    adapter = "com.squareup.wire.ProtoAdapter#SINT64",
    label = WireField.Label.REQUIRED
  )
  public val requiredSint64: Long,
  @field:WireField(
    tag = 20,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32"
  )
  public val optionalFixed32: Int? = null,
  @field:WireField(
    tag = 21,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED32",
    label = WireField.Label.REQUIRED
  )
  public val requiredFixed32: Int,
  @field:WireField(
    tag = 22,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64"
  )
  public val optionalFixed64: Long? = null,
  @field:WireField(
    tag = 23,
    adapter = "com.squareup.wire.ProtoAdapter#FIXED64",
    label = WireField.Label.REQUIRED
  )
  public val requiredFixed64: Long,
  @field:WireField(
    tag = 24,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32"
  )
  public val optionalSfixed32: Int? = null,
  @field:WireField(
    tag = 25,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED32",
    label = WireField.Label.REQUIRED
  )
  public val requiredSfixed32: Int,
  @field:WireField(
    tag = 26,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64"
  )
  public val optionalSfixed64: Long? = null,
  @field:WireField(
    tag = 27,
    adapter = "com.squareup.wire.ProtoAdapter#SFIXED64",
    label = WireField.Label.REQUIRED
  )
  public val requiredSfixed64: Long,
  @field:WireField(
    tag = 28,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public val optionalBool: Boolean? = null,
  @field:WireField(
    tag = 29,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.REQUIRED
  )
  public val requiredBool: Boolean,
  @field:WireField(
    tag = 30,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public val optionalString: String? = null,
  @field:WireField(
    tag = 31,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REQUIRED
  )
  public val requiredString: String,
  @field:WireField(
    tag = 32,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public val optionalBytes: ByteString? = null,
  @field:WireField(
    tag = 33,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    label = WireField.Label.REQUIRED
  )
  public val requiredBytes: ByteString,
  @field:WireField(
    tag = 34,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public val optionalWithDefaultInt32: Int? = null,
  @field:WireField(
    tag = 35,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public val optionalWithDefaultString: String? = null,
  @field:WireField(
    tag = 36,
    adapter = "com.proto.test2.TestService2Request${'$'}Corpus#ADAPTER"
  )
  public val corpus: Corpus? = null,
  samples: List<Int> = emptyList(),
  @field:WireField(
    tag = 38,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    oneofName = "oneOfField"
  )
  public val name: String? = null,
  @field:WireField(
    tag = 39,
    adapter = "com.proto.test2.TestService2Request${'$'}NestedMessage#ADAPTER",
    oneofName = "oneOfField"
  )
  public val nested: NestedMessage? = null,
  map: Map<String, NestedMessage> = emptyMap(),
  map_field: List<MapFieldEntry> = emptyList(),
  /**
   * Extension source: test2.proto
   */
  @field:WireField(
    tag = 126,
    adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public val extension_scope: Int? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : AndroidMessage<TestService2Request, Nothing>(ADAPTER, unknownFields) {
  /**
   *  https://developers.google.com/protocol-buffers/docs/proto#other
   */
  @field:WireField(
    tag = 37,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.PACKED
  )
  public val samples: List<Int> = immutableCopyOf("samples", samples)

  /**
   *  https://developers.google.com/protocol-buffers/docs/proto#maps (MAps can't have lables)
   */
  @field:WireField(
    tag = 40,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.proto.test2.TestService2Request${'$'}NestedMessage#ADAPTER"
  )
  public val map: Map<String, NestedMessage> = immutableCopyOf("map", map)

  @field:WireField(
    tag = 41,
    adapter = "com.proto.test2.TestService2Request${'$'}MapFieldEntry#ADAPTER",
    label = WireField.Label.REPEATED
  )
  public val map_field: List<MapFieldEntry> = immutableCopyOf("map_field", map_field)

  init {
    require(countNonNull(name, nested) <= 1) {
      "At most one of name, nested may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is TestService2Request) return false
    if (unknownFields != other.unknownFields) return false
    if (optionalDouble != other.optionalDouble) return false
    if (requiredDouble != other.requiredDouble) return false
    if (optionalInt32 != other.optionalInt32) return false
    if (requiredInt32 != other.requiredInt32) return false
    if (optionalInt64 != other.optionalInt64) return false
    if (requiredInt64 != other.requiredInt64) return false
    if (optionalUint32 != other.optionalUint32) return false
    if (requiredUint32 != other.requiredUint32) return false
    if (optionalUint64 != other.optionalUint64) return false
    if (requiredUint64 != other.requiredUint64) return false
    if (optionalSint32 != other.optionalSint32) return false
    if (requiredSint32 != other.requiredSint32) return false
    if (optionalSint64 != other.optionalSint64) return false
    if (requiredSint64 != other.requiredSint64) return false
    if (optionalFixed32 != other.optionalFixed32) return false
    if (requiredFixed32 != other.requiredFixed32) return false
    if (optionalFixed64 != other.optionalFixed64) return false
    if (requiredFixed64 != other.requiredFixed64) return false
    if (optionalSfixed32 != other.optionalSfixed32) return false
    if (requiredSfixed32 != other.requiredSfixed32) return false
    if (optionalSfixed64 != other.optionalSfixed64) return false
    if (requiredSfixed64 != other.requiredSfixed64) return false
    if (optionalBool != other.optionalBool) return false
    if (requiredBool != other.requiredBool) return false
    if (optionalString != other.optionalString) return false
    if (requiredString != other.requiredString) return false
    if (optionalBytes != other.optionalBytes) return false
    if (requiredBytes != other.requiredBytes) return false
    if (optionalWithDefaultInt32 != other.optionalWithDefaultInt32) return false
    if (optionalWithDefaultString != other.optionalWithDefaultString) return false
    if (corpus != other.corpus) return false
    if (samples != other.samples) return false
    if (name != other.name) return false
    if (nested != other.nested) return false
    if (map != other.map) return false
    if (map_field != other.map_field) return false
    if (extension_scope != other.extension_scope) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (optionalDouble?.hashCode() ?: 0)
      result = result * 37 + requiredDouble.hashCode()
      result = result * 37 + (optionalInt32?.hashCode() ?: 0)
      result = result * 37 + requiredInt32.hashCode()
      result = result * 37 + (optionalInt64?.hashCode() ?: 0)
      result = result * 37 + requiredInt64.hashCode()
      result = result * 37 + (optionalUint32?.hashCode() ?: 0)
      result = result * 37 + requiredUint32.hashCode()
      result = result * 37 + (optionalUint64?.hashCode() ?: 0)
      result = result * 37 + requiredUint64.hashCode()
      result = result * 37 + (optionalSint32?.hashCode() ?: 0)
      result = result * 37 + requiredSint32.hashCode()
      result = result * 37 + (optionalSint64?.hashCode() ?: 0)
      result = result * 37 + requiredSint64.hashCode()
      result = result * 37 + (optionalFixed32?.hashCode() ?: 0)
      result = result * 37 + requiredFixed32.hashCode()
      result = result * 37 + (optionalFixed64?.hashCode() ?: 0)
      result = result * 37 + requiredFixed64.hashCode()
      result = result * 37 + (optionalSfixed32?.hashCode() ?: 0)
      result = result * 37 + requiredSfixed32.hashCode()
      result = result * 37 + (optionalSfixed64?.hashCode() ?: 0)
      result = result * 37 + requiredSfixed64.hashCode()
      result = result * 37 + (optionalBool?.hashCode() ?: 0)
      result = result * 37 + requiredBool.hashCode()
      result = result * 37 + (optionalString?.hashCode() ?: 0)
      result = result * 37 + requiredString.hashCode()
      result = result * 37 + (optionalBytes?.hashCode() ?: 0)
      result = result * 37 + requiredBytes.hashCode()
      result = result * 37 + (optionalWithDefaultInt32?.hashCode() ?: 0)
      result = result * 37 + (optionalWithDefaultString?.hashCode() ?: 0)
      result = result * 37 + (corpus?.hashCode() ?: 0)
      result = result * 37 + samples.hashCode()
      result = result * 37 + (name?.hashCode() ?: 0)
      result = result * 37 + (nested?.hashCode() ?: 0)
      result = result * 37 + map.hashCode()
      result = result * 37 + map_field.hashCode()
      result = result * 37 + (extension_scope?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (optionalDouble != null) result += """optionalDouble=$optionalDouble"""
    result += """requiredDouble=$requiredDouble"""
    if (optionalInt32 != null) result += """optionalInt32=$optionalInt32"""
    result += """requiredInt32=$requiredInt32"""
    if (optionalInt64 != null) result += """optionalInt64=$optionalInt64"""
    result += """requiredInt64=$requiredInt64"""
    if (optionalUint32 != null) result += """optionalUint32=$optionalUint32"""
    result += """requiredUint32=$requiredUint32"""
    if (optionalUint64 != null) result += """optionalUint64=$optionalUint64"""
    result += """requiredUint64=$requiredUint64"""
    if (optionalSint32 != null) result += """optionalSint32=$optionalSint32"""
    result += """requiredSint32=$requiredSint32"""
    if (optionalSint64 != null) result += """optionalSint64=$optionalSint64"""
    result += """requiredSint64=$requiredSint64"""
    if (optionalFixed32 != null) result += """optionalFixed32=$optionalFixed32"""
    result += """requiredFixed32=$requiredFixed32"""
    if (optionalFixed64 != null) result += """optionalFixed64=$optionalFixed64"""
    result += """requiredFixed64=$requiredFixed64"""
    if (optionalSfixed32 != null) result += """optionalSfixed32=$optionalSfixed32"""
    result += """requiredSfixed32=$requiredSfixed32"""
    if (optionalSfixed64 != null) result += """optionalSfixed64=$optionalSfixed64"""
    result += """requiredSfixed64=$requiredSfixed64"""
    if (optionalBool != null) result += """optionalBool=$optionalBool"""
    result += """requiredBool=$requiredBool"""
    if (optionalString != null) result += """optionalString=${sanitize(optionalString)}"""
    result += """requiredString=${sanitize(requiredString)}"""
    if (optionalBytes != null) result += """optionalBytes=$optionalBytes"""
    result += """requiredBytes=$requiredBytes"""
    if (optionalWithDefaultInt32 != null) result +=
        """optionalWithDefaultInt32=$optionalWithDefaultInt32"""
    if (optionalWithDefaultString != null) result +=
        """optionalWithDefaultString=${sanitize(optionalWithDefaultString)}"""
    if (corpus != null) result += """corpus=$corpus"""
    if (samples.isNotEmpty()) result += """samples=$samples"""
    if (name != null) result += """name=${sanitize(name)}"""
    if (nested != null) result += """nested=$nested"""
    if (map.isNotEmpty()) result += """map=$map"""
    if (map_field.isNotEmpty()) result += """map_field=$map_field"""
    if (extension_scope != null) result += """extension_scope=$extension_scope"""
    return result.joinToString(prefix = "TestService2Request{", separator = ", ", postfix = "}")
  }

  public fun copy(
    optionalDouble: Double? = this.optionalDouble,
    requiredDouble: Double = this.requiredDouble,
    optionalInt32: Int? = this.optionalInt32,
    requiredInt32: Int = this.requiredInt32,
    optionalInt64: Long? = this.optionalInt64,
    requiredInt64: Long = this.requiredInt64,
    optionalUint32: Int? = this.optionalUint32,
    requiredUint32: Int = this.requiredUint32,
    optionalUint64: Long? = this.optionalUint64,
    requiredUint64: Long = this.requiredUint64,
    optionalSint32: Int? = this.optionalSint32,
    requiredSint32: Int = this.requiredSint32,
    optionalSint64: Long? = this.optionalSint64,
    requiredSint64: Long = this.requiredSint64,
    optionalFixed32: Int? = this.optionalFixed32,
    requiredFixed32: Int = this.requiredFixed32,
    optionalFixed64: Long? = this.optionalFixed64,
    requiredFixed64: Long = this.requiredFixed64,
    optionalSfixed32: Int? = this.optionalSfixed32,
    requiredSfixed32: Int = this.requiredSfixed32,
    optionalSfixed64: Long? = this.optionalSfixed64,
    requiredSfixed64: Long = this.requiredSfixed64,
    optionalBool: Boolean? = this.optionalBool,
    requiredBool: Boolean = this.requiredBool,
    optionalString: String? = this.optionalString,
    requiredString: String = this.requiredString,
    optionalBytes: ByteString? = this.optionalBytes,
    requiredBytes: ByteString = this.requiredBytes,
    optionalWithDefaultInt32: Int? = this.optionalWithDefaultInt32,
    optionalWithDefaultString: String? = this.optionalWithDefaultString,
    corpus: Corpus? = this.corpus,
    samples: List<Int> = this.samples,
    name: String? = this.name,
    nested: NestedMessage? = this.nested,
    map: Map<String, NestedMessage> = this.map,
    map_field: List<MapFieldEntry> = this.map_field,
    extension_scope: Int? = this.extension_scope,
    unknownFields: ByteString = this.unknownFields
  ): TestService2Request = TestService2Request(optionalDouble, requiredDouble, optionalInt32,
      requiredInt32, optionalInt64, requiredInt64, optionalUint32, requiredUint32, optionalUint64,
      requiredUint64, optionalSint32, requiredSint32, optionalSint64, requiredSint64,
      optionalFixed32, requiredFixed32, optionalFixed64, requiredFixed64, optionalSfixed32,
      requiredSfixed32, optionalSfixed64, requiredSfixed64, optionalBool, requiredBool,
      optionalString, requiredString, optionalBytes, requiredBytes, optionalWithDefaultInt32,
      optionalWithDefaultString, corpus, samples, name, nested, map, map_field, extension_scope,
      unknownFields)

  public companion object {
    public const val DEFAULT_OPTIONALWITHDEFAULTINT32: Int = 10

    public const val DEFAULT_OPTIONALWITHDEFAULTSTRING: String = "temp_holder"

    @JvmField
    public val DEFAULT_CORPUS: Corpus = Corpus.UNIVERSAL

    @JvmField
    public val ADAPTER: ProtoAdapter<TestService2Request> = object :
        ProtoAdapter<TestService2Request>(
      FieldEncoding.LENGTH_DELIMITED, 
      TestService2Request::class, 
      "type.googleapis.com/test2.TestService2Request", 
      PROTO_2, 
      null, 
      "test2.proto"
    ) {
      private val mapAdapter: ProtoAdapter<Map<String, NestedMessage>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, NestedMessage.ADAPTER) }

      public override fun encodedSize(`value`: TestService2Request): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.DOUBLE.encodedSizeWithTag(1, value.optionalDouble)
        size += ProtoAdapter.DOUBLE.encodedSizeWithTag(3, value.requiredDouble)
        size += ProtoAdapter.INT32.encodedSizeWithTag(4, value.optionalInt32)
        size += ProtoAdapter.INT32.encodedSizeWithTag(5, value.requiredInt32)
        size += ProtoAdapter.INT64.encodedSizeWithTag(6, value.optionalInt64)
        size += ProtoAdapter.INT64.encodedSizeWithTag(7, value.requiredInt64)
        size += ProtoAdapter.UINT32.encodedSizeWithTag(8, value.optionalUint32)
        size += ProtoAdapter.UINT32.encodedSizeWithTag(12, value.requiredUint32)
        size += ProtoAdapter.UINT64.encodedSizeWithTag(13, value.optionalUint64)
        size += ProtoAdapter.UINT64.encodedSizeWithTag(14, value.requiredUint64)
        size += ProtoAdapter.SINT32.encodedSizeWithTag(16, value.optionalSint32)
        size += ProtoAdapter.SINT32.encodedSizeWithTag(17, value.requiredSint32)
        size += ProtoAdapter.SINT64.encodedSizeWithTag(18, value.optionalSint64)
        size += ProtoAdapter.SINT64.encodedSizeWithTag(19, value.requiredSint64)
        size += ProtoAdapter.FIXED32.encodedSizeWithTag(20, value.optionalFixed32)
        size += ProtoAdapter.FIXED32.encodedSizeWithTag(21, value.requiredFixed32)
        size += ProtoAdapter.FIXED64.encodedSizeWithTag(22, value.optionalFixed64)
        size += ProtoAdapter.FIXED64.encodedSizeWithTag(23, value.requiredFixed64)
        size += ProtoAdapter.SFIXED32.encodedSizeWithTag(24, value.optionalSfixed32)
        size += ProtoAdapter.SFIXED32.encodedSizeWithTag(25, value.requiredSfixed32)
        size += ProtoAdapter.SFIXED64.encodedSizeWithTag(26, value.optionalSfixed64)
        size += ProtoAdapter.SFIXED64.encodedSizeWithTag(27, value.requiredSfixed64)
        size += ProtoAdapter.BOOL.encodedSizeWithTag(28, value.optionalBool)
        size += ProtoAdapter.BOOL.encodedSizeWithTag(29, value.requiredBool)
        size += ProtoAdapter.STRING.encodedSizeWithTag(30, value.optionalString)
        size += ProtoAdapter.STRING.encodedSizeWithTag(31, value.requiredString)
        size += ProtoAdapter.BYTES.encodedSizeWithTag(32, value.optionalBytes)
        size += ProtoAdapter.BYTES.encodedSizeWithTag(33, value.requiredBytes)
        size += ProtoAdapter.INT32.encodedSizeWithTag(34, value.optionalWithDefaultInt32)
        size += ProtoAdapter.STRING.encodedSizeWithTag(35, value.optionalWithDefaultString)
        size += Corpus.ADAPTER.encodedSizeWithTag(36, value.corpus)
        size += ProtoAdapter.INT32.asPacked().encodedSizeWithTag(37, value.samples)
        size += ProtoAdapter.STRING.encodedSizeWithTag(38, value.name)
        size += NestedMessage.ADAPTER.encodedSizeWithTag(39, value.nested)
        size += mapAdapter.encodedSizeWithTag(40, value.map)
        size += MapFieldEntry.ADAPTER.asRepeated().encodedSizeWithTag(41, value.map_field)
        size += ProtoAdapter.INT32.encodedSizeWithTag(126, value.extension_scope)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: TestService2Request): Unit {
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 1, value.optionalDouble)
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 3, value.requiredDouble)
        ProtoAdapter.INT32.encodeWithTag(writer, 4, value.optionalInt32)
        ProtoAdapter.INT32.encodeWithTag(writer, 5, value.requiredInt32)
        ProtoAdapter.INT64.encodeWithTag(writer, 6, value.optionalInt64)
        ProtoAdapter.INT64.encodeWithTag(writer, 7, value.requiredInt64)
        ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.optionalUint32)
        ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.requiredUint32)
        ProtoAdapter.UINT64.encodeWithTag(writer, 13, value.optionalUint64)
        ProtoAdapter.UINT64.encodeWithTag(writer, 14, value.requiredUint64)
        ProtoAdapter.SINT32.encodeWithTag(writer, 16, value.optionalSint32)
        ProtoAdapter.SINT32.encodeWithTag(writer, 17, value.requiredSint32)
        ProtoAdapter.SINT64.encodeWithTag(writer, 18, value.optionalSint64)
        ProtoAdapter.SINT64.encodeWithTag(writer, 19, value.requiredSint64)
        ProtoAdapter.FIXED32.encodeWithTag(writer, 20, value.optionalFixed32)
        ProtoAdapter.FIXED32.encodeWithTag(writer, 21, value.requiredFixed32)
        ProtoAdapter.FIXED64.encodeWithTag(writer, 22, value.optionalFixed64)
        ProtoAdapter.FIXED64.encodeWithTag(writer, 23, value.requiredFixed64)
        ProtoAdapter.SFIXED32.encodeWithTag(writer, 24, value.optionalSfixed32)
        ProtoAdapter.SFIXED32.encodeWithTag(writer, 25, value.requiredSfixed32)
        ProtoAdapter.SFIXED64.encodeWithTag(writer, 26, value.optionalSfixed64)
        ProtoAdapter.SFIXED64.encodeWithTag(writer, 27, value.requiredSfixed64)
        ProtoAdapter.BOOL.encodeWithTag(writer, 28, value.optionalBool)
        ProtoAdapter.BOOL.encodeWithTag(writer, 29, value.requiredBool)
        ProtoAdapter.STRING.encodeWithTag(writer, 30, value.optionalString)
        ProtoAdapter.STRING.encodeWithTag(writer, 31, value.requiredString)
        ProtoAdapter.BYTES.encodeWithTag(writer, 32, value.optionalBytes)
        ProtoAdapter.BYTES.encodeWithTag(writer, 33, value.requiredBytes)
        ProtoAdapter.INT32.encodeWithTag(writer, 34, value.optionalWithDefaultInt32)
        ProtoAdapter.STRING.encodeWithTag(writer, 35, value.optionalWithDefaultString)
        Corpus.ADAPTER.encodeWithTag(writer, 36, value.corpus)
        ProtoAdapter.INT32.asPacked().encodeWithTag(writer, 37, value.samples)
        mapAdapter.encodeWithTag(writer, 40, value.map)
        MapFieldEntry.ADAPTER.asRepeated().encodeWithTag(writer, 41, value.map_field)
        ProtoAdapter.INT32.encodeWithTag(writer, 126, value.extension_scope)
        ProtoAdapter.STRING.encodeWithTag(writer, 38, value.name)
        NestedMessage.ADAPTER.encodeWithTag(writer, 39, value.nested)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: TestService2Request): Unit {
        writer.writeBytes(value.unknownFields)
        NestedMessage.ADAPTER.encodeWithTag(writer, 39, value.nested)
        ProtoAdapter.STRING.encodeWithTag(writer, 38, value.name)
        ProtoAdapter.INT32.encodeWithTag(writer, 126, value.extension_scope)
        MapFieldEntry.ADAPTER.asRepeated().encodeWithTag(writer, 41, value.map_field)
        mapAdapter.encodeWithTag(writer, 40, value.map)
        ProtoAdapter.INT32.asPacked().encodeWithTag(writer, 37, value.samples)
        Corpus.ADAPTER.encodeWithTag(writer, 36, value.corpus)
        ProtoAdapter.STRING.encodeWithTag(writer, 35, value.optionalWithDefaultString)
        ProtoAdapter.INT32.encodeWithTag(writer, 34, value.optionalWithDefaultInt32)
        ProtoAdapter.BYTES.encodeWithTag(writer, 33, value.requiredBytes)
        ProtoAdapter.BYTES.encodeWithTag(writer, 32, value.optionalBytes)
        ProtoAdapter.STRING.encodeWithTag(writer, 31, value.requiredString)
        ProtoAdapter.STRING.encodeWithTag(writer, 30, value.optionalString)
        ProtoAdapter.BOOL.encodeWithTag(writer, 29, value.requiredBool)
        ProtoAdapter.BOOL.encodeWithTag(writer, 28, value.optionalBool)
        ProtoAdapter.SFIXED64.encodeWithTag(writer, 27, value.requiredSfixed64)
        ProtoAdapter.SFIXED64.encodeWithTag(writer, 26, value.optionalSfixed64)
        ProtoAdapter.SFIXED32.encodeWithTag(writer, 25, value.requiredSfixed32)
        ProtoAdapter.SFIXED32.encodeWithTag(writer, 24, value.optionalSfixed32)
        ProtoAdapter.FIXED64.encodeWithTag(writer, 23, value.requiredFixed64)
        ProtoAdapter.FIXED64.encodeWithTag(writer, 22, value.optionalFixed64)
        ProtoAdapter.FIXED32.encodeWithTag(writer, 21, value.requiredFixed32)
        ProtoAdapter.FIXED32.encodeWithTag(writer, 20, value.optionalFixed32)
        ProtoAdapter.SINT64.encodeWithTag(writer, 19, value.requiredSint64)
        ProtoAdapter.SINT64.encodeWithTag(writer, 18, value.optionalSint64)
        ProtoAdapter.SINT32.encodeWithTag(writer, 17, value.requiredSint32)
        ProtoAdapter.SINT32.encodeWithTag(writer, 16, value.optionalSint32)
        ProtoAdapter.UINT64.encodeWithTag(writer, 14, value.requiredUint64)
        ProtoAdapter.UINT64.encodeWithTag(writer, 13, value.optionalUint64)
        ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.requiredUint32)
        ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.optionalUint32)
        ProtoAdapter.INT64.encodeWithTag(writer, 7, value.requiredInt64)
        ProtoAdapter.INT64.encodeWithTag(writer, 6, value.optionalInt64)
        ProtoAdapter.INT32.encodeWithTag(writer, 5, value.requiredInt32)
        ProtoAdapter.INT32.encodeWithTag(writer, 4, value.optionalInt32)
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 3, value.requiredDouble)
        ProtoAdapter.DOUBLE.encodeWithTag(writer, 1, value.optionalDouble)
      }

      public override fun decode(reader: ProtoReader): TestService2Request {
        var optionalDouble: Double? = null
        var requiredDouble: Double? = null
        var optionalInt32: Int? = null
        var requiredInt32: Int? = null
        var optionalInt64: Long? = null
        var requiredInt64: Long? = null
        var optionalUint32: Int? = null
        var requiredUint32: Int? = null
        var optionalUint64: Long? = null
        var requiredUint64: Long? = null
        var optionalSint32: Int? = null
        var requiredSint32: Int? = null
        var optionalSint64: Long? = null
        var requiredSint64: Long? = null
        var optionalFixed32: Int? = null
        var requiredFixed32: Int? = null
        var optionalFixed64: Long? = null
        var requiredFixed64: Long? = null
        var optionalSfixed32: Int? = null
        var requiredSfixed32: Int? = null
        var optionalSfixed64: Long? = null
        var requiredSfixed64: Long? = null
        var optionalBool: Boolean? = null
        var requiredBool: Boolean? = null
        var optionalString: String? = null
        var requiredString: String? = null
        var optionalBytes: ByteString? = null
        var requiredBytes: ByteString? = null
        var optionalWithDefaultInt32: Int? = null
        var optionalWithDefaultString: String? = null
        var corpus: Corpus? = null
        val samples = mutableListOf<Int>()
        var name: String? = null
        var nested: NestedMessage? = null
        val map = mutableMapOf<String, NestedMessage>()
        val map_field = mutableListOf<MapFieldEntry>()
        var extension_scope: Int? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> optionalDouble = ProtoAdapter.DOUBLE.decode(reader)
            3 -> requiredDouble = ProtoAdapter.DOUBLE.decode(reader)
            4 -> optionalInt32 = ProtoAdapter.INT32.decode(reader)
            5 -> requiredInt32 = ProtoAdapter.INT32.decode(reader)
            6 -> optionalInt64 = ProtoAdapter.INT64.decode(reader)
            7 -> requiredInt64 = ProtoAdapter.INT64.decode(reader)
            8 -> optionalUint32 = ProtoAdapter.UINT32.decode(reader)
            12 -> requiredUint32 = ProtoAdapter.UINT32.decode(reader)
            13 -> optionalUint64 = ProtoAdapter.UINT64.decode(reader)
            14 -> requiredUint64 = ProtoAdapter.UINT64.decode(reader)
            16 -> optionalSint32 = ProtoAdapter.SINT32.decode(reader)
            17 -> requiredSint32 = ProtoAdapter.SINT32.decode(reader)
            18 -> optionalSint64 = ProtoAdapter.SINT64.decode(reader)
            19 -> requiredSint64 = ProtoAdapter.SINT64.decode(reader)
            20 -> optionalFixed32 = ProtoAdapter.FIXED32.decode(reader)
            21 -> requiredFixed32 = ProtoAdapter.FIXED32.decode(reader)
            22 -> optionalFixed64 = ProtoAdapter.FIXED64.decode(reader)
            23 -> requiredFixed64 = ProtoAdapter.FIXED64.decode(reader)
            24 -> optionalSfixed32 = ProtoAdapter.SFIXED32.decode(reader)
            25 -> requiredSfixed32 = ProtoAdapter.SFIXED32.decode(reader)
            26 -> optionalSfixed64 = ProtoAdapter.SFIXED64.decode(reader)
            27 -> requiredSfixed64 = ProtoAdapter.SFIXED64.decode(reader)
            28 -> optionalBool = ProtoAdapter.BOOL.decode(reader)
            29 -> requiredBool = ProtoAdapter.BOOL.decode(reader)
            30 -> optionalString = ProtoAdapter.STRING.decode(reader)
            31 -> requiredString = ProtoAdapter.STRING.decode(reader)
            32 -> optionalBytes = ProtoAdapter.BYTES.decode(reader)
            33 -> requiredBytes = ProtoAdapter.BYTES.decode(reader)
            34 -> optionalWithDefaultInt32 = ProtoAdapter.INT32.decode(reader)
            35 -> optionalWithDefaultString = ProtoAdapter.STRING.decode(reader)
            36 -> try {
              corpus = Corpus.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            37 -> samples.add(ProtoAdapter.INT32.decode(reader))
            38 -> name = ProtoAdapter.STRING.decode(reader)
            39 -> nested = NestedMessage.ADAPTER.decode(reader)
            40 -> map.putAll(mapAdapter.decode(reader))
            41 -> map_field.add(MapFieldEntry.ADAPTER.decode(reader))
            126 -> extension_scope = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return TestService2Request(
          optionalDouble = optionalDouble,
          requiredDouble = requiredDouble ?: throw missingRequiredFields(requiredDouble,
              "requiredDouble"),
          optionalInt32 = optionalInt32,
          requiredInt32 = requiredInt32 ?: throw missingRequiredFields(requiredInt32,
              "requiredInt32"),
          optionalInt64 = optionalInt64,
          requiredInt64 = requiredInt64 ?: throw missingRequiredFields(requiredInt64,
              "requiredInt64"),
          optionalUint32 = optionalUint32,
          requiredUint32 = requiredUint32 ?: throw missingRequiredFields(requiredUint32,
              "requiredUint32"),
          optionalUint64 = optionalUint64,
          requiredUint64 = requiredUint64 ?: throw missingRequiredFields(requiredUint64,
              "requiredUint64"),
          optionalSint32 = optionalSint32,
          requiredSint32 = requiredSint32 ?: throw missingRequiredFields(requiredSint32,
              "requiredSint32"),
          optionalSint64 = optionalSint64,
          requiredSint64 = requiredSint64 ?: throw missingRequiredFields(requiredSint64,
              "requiredSint64"),
          optionalFixed32 = optionalFixed32,
          requiredFixed32 = requiredFixed32 ?: throw missingRequiredFields(requiredFixed32,
              "requiredFixed32"),
          optionalFixed64 = optionalFixed64,
          requiredFixed64 = requiredFixed64 ?: throw missingRequiredFields(requiredFixed64,
              "requiredFixed64"),
          optionalSfixed32 = optionalSfixed32,
          requiredSfixed32 = requiredSfixed32 ?: throw missingRequiredFields(requiredSfixed32,
              "requiredSfixed32"),
          optionalSfixed64 = optionalSfixed64,
          requiredSfixed64 = requiredSfixed64 ?: throw missingRequiredFields(requiredSfixed64,
              "requiredSfixed64"),
          optionalBool = optionalBool,
          requiredBool = requiredBool ?: throw missingRequiredFields(requiredBool, "requiredBool"),
          optionalString = optionalString,
          requiredString = requiredString ?: throw missingRequiredFields(requiredString,
              "requiredString"),
          optionalBytes = optionalBytes,
          requiredBytes = requiredBytes ?: throw missingRequiredFields(requiredBytes,
              "requiredBytes"),
          optionalWithDefaultInt32 = optionalWithDefaultInt32,
          optionalWithDefaultString = optionalWithDefaultString,
          corpus = corpus,
          samples = samples,
          name = name,
          nested = nested,
          map = map,
          map_field = map_field,
          extension_scope = extension_scope,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: TestService2Request): TestService2Request = value.copy(
        nested = value.nested?.let(NestedMessage.ADAPTER::redact),
        map = value.map.redactElements(NestedMessage.ADAPTER),
        map_field = value.map_field.redactElements(MapFieldEntry.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<TestService2Request> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }

  /**
   *  https://developers.google.com/protocol-buffers/docs/proto#enum
   */
  public enum class Corpus(
    public override val `value`: Int
  ) : WireEnum {
    UNIVERSAL(0),
    WEB(1),
    IMAGES(2),
    LOCAL(3),
    NEWS(4),
    PRODUCTS(5),
    VIDEO(6),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<Corpus> = object : EnumAdapter<Corpus>(
        Corpus::class, 
        PROTO_2, 
        Corpus.UNIVERSAL
      ) {
        public override fun fromValue(`value`: Int): Corpus? = Corpus.fromValue(value)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): Corpus? = when (value) {
        0 -> UNIVERSAL
        1 -> WEB
        2 -> IMAGES
        3 -> LOCAL
        4 -> NEWS
        5 -> PRODUCTS
        6 -> VIDEO
        else -> null
      }
    }
  }

  public enum class EnumAllowingAlias(
    public override val `value`: Int
  ) : WireEnum {
    UNKNOWN(0),
    STARTED(1),
    RUNNING(1),
    ;

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<EnumAllowingAlias> = object : EnumAdapter<EnumAllowingAlias>(
        EnumAllowingAlias::class, 
        PROTO_2, 
        EnumAllowingAlias.UNKNOWN
      ) {
        public override fun fromValue(`value`: Int): EnumAllowingAlias? =
            EnumAllowingAlias.fromValue(value)
      }

      @JvmStatic
      public fun fromValue(`value`: Int): EnumAllowingAlias? = when (value) {
        0 -> UNKNOWN
        1 -> STARTED
        1 -> RUNNING
        else -> null
      }
    }
  }

  /**
   * https://developers.google.com/protocol-buffers/docs/proto#nested
   */
  public class NestedMessage(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
    )
    public val url: String,
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public val title: String? = null,
    snippets: List<String> = emptyList(),
    unknownFields: ByteString = ByteString.EMPTY
  ) : AndroidMessage<NestedMessage, Nothing>(ADAPTER, unknownFields) {
    @field:WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
    )
    public val snippets: List<String> = immutableCopyOf("snippets", snippets)

    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    public override fun newBuilder(): Nothing = throw
        AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is NestedMessage) return false
      if (unknownFields != other.unknownFields) return false
      if (url != other.url) return false
      if (title != other.title) return false
      if (snippets != other.snippets) return false
      return true
    }

    public override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + url.hashCode()
        result = result * 37 + (title?.hashCode() ?: 0)
        result = result * 37 + snippets.hashCode()
        super.hashCode = result
      }
      return result
    }

    public override fun toString(): String {
      val result = mutableListOf<String>()
      result += """url=${sanitize(url)}"""
      if (title != null) result += """title=${sanitize(title)}"""
      if (snippets.isNotEmpty()) result += """snippets=${sanitize(snippets)}"""
      return result.joinToString(prefix = "NestedMessage{", separator = ", ", postfix = "}")
    }

    public fun copy(
      url: String = this.url,
      title: String? = this.title,
      snippets: List<String> = this.snippets,
      unknownFields: ByteString = this.unknownFields
    ): NestedMessage = NestedMessage(url, title, snippets, unknownFields)

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<NestedMessage> = object : ProtoAdapter<NestedMessage>(
        FieldEncoding.LENGTH_DELIMITED, 
        NestedMessage::class, 
        "type.googleapis.com/test2.TestService2Request.NestedMessage", 
        PROTO_2, 
        null, 
        "test2.proto"
      ) {
        public override fun encodedSize(`value`: NestedMessage): Int {
          var size = value.unknownFields.size
          size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.url)
          size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.title)
          size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(3, value.snippets)
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: NestedMessage): Unit {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.url)
          ProtoAdapter.STRING.encodeWithTag(writer, 2, value.title)
          ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.snippets)
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: NestedMessage): Unit {
          writer.writeBytes(value.unknownFields)
          ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.snippets)
          ProtoAdapter.STRING.encodeWithTag(writer, 2, value.title)
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.url)
        }

        public override fun decode(reader: ProtoReader): NestedMessage {
          var url: String? = null
          var title: String? = null
          val snippets = mutableListOf<String>()
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> url = ProtoAdapter.STRING.decode(reader)
              2 -> title = ProtoAdapter.STRING.decode(reader)
              3 -> snippets.add(ProtoAdapter.STRING.decode(reader))
              else -> reader.readUnknownField(tag)
            }
          }
          return NestedMessage(
            url = url ?: throw missingRequiredFields(url, "url"),
            title = title,
            snippets = snippets,
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: NestedMessage): NestedMessage = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      @JvmField
      public val CREATOR: Parcelable.Creator<NestedMessage> = AndroidMessage.newCreator(ADAPTER)

      private const val serialVersionUID: Long = 0L
    }
  }

  /**
   * Map equivalent wire type (Backward compatibility)
   * https://developers.google.com/protocol-buffers/docs/proto#backwards
   */
  public class MapFieldEntry(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    public val key: String? = null,
    @field:WireField(
      tag = 2,
      adapter = "com.proto.test2.TestService2Request${'$'}NestedMessage#ADAPTER",
      declaredName = "value"
    )
    public val value_: NestedMessage? = null,
    unknownFields: ByteString = ByteString.EMPTY
  ) : AndroidMessage<MapFieldEntry, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    public override fun newBuilder(): Nothing = throw
        AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

    public override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is MapFieldEntry) return false
      if (unknownFields != other.unknownFields) return false
      if (key != other.key) return false
      if (value_ != other.value_) return false
      return true
    }

    public override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + (key?.hashCode() ?: 0)
        result = result * 37 + (value_?.hashCode() ?: 0)
        super.hashCode = result
      }
      return result
    }

    public override fun toString(): String {
      val result = mutableListOf<String>()
      if (key != null) result += """key=${sanitize(key)}"""
      if (value_ != null) result += """value_=$value_"""
      return result.joinToString(prefix = "MapFieldEntry{", separator = ", ", postfix = "}")
    }

    public fun copy(
      key: String? = this.key,
      value_: NestedMessage? = this.value_,
      unknownFields: ByteString = this.unknownFields
    ): MapFieldEntry = MapFieldEntry(key, value_, unknownFields)

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<MapFieldEntry> = object : ProtoAdapter<MapFieldEntry>(
        FieldEncoding.LENGTH_DELIMITED, 
        MapFieldEntry::class, 
        "type.googleapis.com/test2.TestService2Request.MapFieldEntry", 
        PROTO_2, 
        null, 
        "test2.proto"
      ) {
        public override fun encodedSize(`value`: MapFieldEntry): Int {
          var size = value.unknownFields.size
          size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.key)
          size += NestedMessage.ADAPTER.encodedSizeWithTag(2, value.value_)
          return size
        }

        public override fun encode(writer: ProtoWriter, `value`: MapFieldEntry): Unit {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.key)
          NestedMessage.ADAPTER.encodeWithTag(writer, 2, value.value_)
          writer.writeBytes(value.unknownFields)
        }

        public override fun encode(writer: ReverseProtoWriter, `value`: MapFieldEntry): Unit {
          writer.writeBytes(value.unknownFields)
          NestedMessage.ADAPTER.encodeWithTag(writer, 2, value.value_)
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.key)
        }

        public override fun decode(reader: ProtoReader): MapFieldEntry {
          var key: String? = null
          var value_: NestedMessage? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> key = ProtoAdapter.STRING.decode(reader)
              2 -> value_ = NestedMessage.ADAPTER.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return MapFieldEntry(
            key = key,
            value_ = value_,
            unknownFields = unknownFields
          )
        }

        public override fun redact(`value`: MapFieldEntry): MapFieldEntry = value.copy(
          value_ = value.value_?.let(NestedMessage.ADAPTER::redact),
          unknownFields = ByteString.EMPTY
        )
      }

      @JvmField
      public val CREATOR: Parcelable.Creator<MapFieldEntry> = AndroidMessage.newCreator(ADAPTER)

      private const val serialVersionUID: Long = 0L
    }
  }
}
